-- 🔍 View SQL Definitions (Trace Source Logic)
EXEC sp_helptext 'ZZROProd.SSE.v_M_BAMHouseholdCurrent';
GO
EXEC sp_helptext 'ZZROProd.SSE.v_M_AcctHistory';
GO
EXEC sp_helptext 'ZZROProd.SSE.v_M_NNAAcctHST';
GO

-- 🧭 Map Columns from Views (Trace Field Lineage)
SELECT 
    v.name AS ViewName,
    c.name AS ColumnName,
    c.column_id
FROM sys.views v
JOIN sys.columns c ON v.object_id = c.object_id
WHERE v.name IN (
    'v_M_BAMHouseholdCurrent', 
    'v_M_AcctHistory', 
    'v_M_NNAAcctHST'
);
GO

-- 🗂️ Example: Add Field Description to BAM View
EXEC sp_addextendedproperty 
    @name = N'MS_Description', 
    @value = N'Comes from monthly UHNW ETL process pre-merge',
    @level0type = N'SCHEMA', @level0name = 'SSE',
    @level1type = N'VIEW',  @level1name = 'v_M_BAMHouseholdCurrent',
    @level2type = N'COLUMN', @level2name = 'HouseholdID';
GO



-- Always start by switching to the right DB
USE ZZROProd;
GO

-- View SQL Definitions
EXEC sp_helptext 'SSE.v_M_BAMHouseholdCurrent';
GO
EXEC sp_helptext 'SSE.v_M_AcctHistory';
GO
EXEC sp_helptext 'SSE.v_M_NNAAcctHST';
GO

-- Add documentation for a column
EXEC sp_addextendedproperty 
    @name = N'MS_Description', 
    @value = N'Loaded monthly from UHNW data source via ETL',
    @level0type = N'SCHEMA', @level0name = 'SSE',
    @level1type = N'VIEW',  @level1name = 'v_M_BAMHouseholdCurrent',
    @level2type = N'COLUMN', @level2name = 'HouseholdID';
GO



USE YourDatabase;
SELECT 
    sed.referenced_schema_name, 
    sed.referenced_entity_name,
    sed.referenced_class_desc
FROM sys.sql_expression_dependencies AS sed
WHERE sed.referencing_id = OBJECT_ID(N'SSE.v_M_BAMHouseholdCurrent');






USE ZZROProd;
GO

SELECT 
    OBJECT_NAME(sed.referencing_id) AS referencing_view,
    sed.referenced_schema_name, 
    sed.referenced_entity_name,
    sed.referenced_class_desc
FROM sys.sql_expression_dependencies AS sed
WHERE sed.referencing_id IN (
    OBJECT_ID(N'dbo.e_M_BAMHouseholdCurrent'),
    OBJECT_ID(N'dbo.e_M_AccountHistory'),
    OBJECT_ID(N'dbo.e_M_NNAAcctHST')
);


EXEC sp_helptext 'dbo.e_M_BAMHouseholdCurrent';
GO
EXEC sp_helptext 'dbo.e_M_AccountHistory';
GO
EXEC sp_helptext 'dbo.e_M_NNAAcctHST';
GO


inspect tables


USE ZZROProd;
GO
SELECT 
    o.name,
    o.type,            -- 'U' = table, 'S' = system table, 'SN' = synonym
    o.type_desc
FROM sys.objects o
WHERE o.name IN ('e_M_BAMHouseholdCurrent',
                 'e_M_AccountHistory',
                 'e_M_NNAAcctHST');




USE ZZROProd;
GO
/* A) List of columns */
SELECT 
    COLUMN_NAME,
    DATA_TYPE,
    ORDINAL_POSITION
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_SCHEMA = 'dbo'
  AND TABLE_NAME   = 'e_M_BAMHouseholdCurrent'
ORDER BY ORDINAL_POSITION;
GO
/* B) First 100 rows (add an ORDER BY once you identify a freshness column) */
SELECT TOP (100) *
FROM dbo.e_M_BAMHouseholdCurrent;
GO



freshness 


USE ZZROProd;
GO
/* 1️⃣  See the most recent timestamp in the whole table */
SELECT MAX(LastUpdateDT) AS LatestLastUpdateDT
FROM dbo.e_M_NNAAcctHST;
GO

/* 2️⃣  Pull the 100 most‑recent rows, newest first */
SELECT TOP (100) *
FROM dbo.e_M_NNAAcctHST
ORDER BY LastUpdateDT DESC;
GO

/* 3️⃣  OPTIONAL:  Check freshness by month (TimePeriod_ID) */
SELECT
    TimePeriod_ID,
    MAX(LastUpdateDT) AS MaxLastUpdateDT,
    COUNT(*)          AS RowCount
FROM dbo.e_M_NNAAcctHST
GROUP BY TimePeriod_ID
ORDER BY TimePeriod_ID DESC;
GO

/* 4️⃣  OPTIONAL:  Inspect ONLY the rows loaded in the latest batch */
DECLARE @LatestDT DATETIME = (
    SELECT MAX(LastUpdateDT)
    FROM dbo.e_M_NNAAcctHST
);
SELECT *
FROM dbo.e_M_NNAAcctHST
WHERE LastUpdateDT = @LatestDT;
GO


2
USE ZZROProd;
GO
/* 1️⃣ Latest timestamp available (substitute a different column if needed) */
SELECT MAX(LastUpdateDT) AS LatestLastUpdateDT
FROM dbo.e_M_BAMHouseholdCurrent;   -- if no LastUpdateDT, try MAX(LoadDate) or just skip
GO

/* 2️⃣ 100 most‑recent rows */
SELECT TOP (100) *
FROM dbo.e_M_BAMHouseholdCurrent
ORDER BY LastUpdateDT DESC;         -- change column name if needed
GO

/* 3️⃣ Freshness by month */
SELECT
    TimePeriod_ID,
    MAX(LastUpdateDT) AS MaxLastUpdateDT,
    COUNT(*)          AS [RowCount]
FROM dbo.e_M_BAMHouseholdCurrent
GROUP BY TimePeriod_ID
ORDER BY TimePeriod_ID DESC;
GO

/* 4️⃣ Rows in latest batch */
DECLARE @LatestDT DATETIME = (
    SELECT MAX(LastUpdateDT)
    FROM dbo.e_M_BAMHouseholdCurrent
);
SELECT *
FROM dbo.e_M_BAMHouseholdCurrent
WHERE LastUpdateDT = @LatestDT;
GO


3
USE ZZROProd;
GO
/* 1️⃣ Latest timestamp */
SELECT MAX(LastUpdateDT) AS LatestLastUpdateDT
FROM dbo.e_M_AccountHistory;        -- change column name if needed
GO

/* 2️⃣ 100 most‑recent rows */
SELECT TOP (100) *
FROM dbo.e_M_AccountHistory
ORDER BY LastUpdateDT DESC;         -- or AsOfTimePeriod if that’s the only indicator
GO

/* 3️⃣ Freshness by month */
SELECT
    TimePeriod_ID,
    MAX(LastUpdateDT) AS MaxLastUpdateDT,
    COUNT(*)          AS [RowCount]
FROM dbo.e_M_AccountHistory
GROUP BY TimePeriod_ID
ORDER BY TimePeriod_ID DESC;
GO

/* 4️⃣ Rows in latest batch */
DECLARE @LatestDT DATETIME = (
    SELECT MAX(LastUpdateDT)
    FROM dbo.e_M_AccountHistory
);
SELECT *
FROM dbo.e_M_AccountHistory
WHERE LastUpdateDT = @LatestDT;
GO


2 again
USE ZZROProd;
GO
/* 1️⃣ Latest period present */
SELECT MAX(TimePeriod_ID) AS LatestTimePeriod
FROM dbo.e_M_BAMHouseholdCurrent;
GO

/* Save it to a variable for later steps */
DECLARE @LatestPeriod INT = (
    SELECT MAX(TimePeriod_ID)
    FROM dbo.e_M_BAMHouseholdCurrent
);

/* 2️⃣ Show 100 rows from the newest period */
SELECT TOP (100) *
FROM dbo.e_M_BAMHouseholdCurrent
WHERE TimePeriod_ID = @LatestPeriod;
GO

/* 3️⃣ Row counts and freshness by month */
SELECT
    TimePeriod_ID,
    COUNT(*)          AS [RowCount]
FROM dbo.e_M_BAMHouseholdCurrent
GROUP BY TimePeriod_ID
ORDER BY TimePeriod_ID DESC;
GO

/* 4️⃣ (Equivalent) list of **all** rows in the latest period */
SELECT *
FROM dbo.e_M_BAMHouseholdCurrent
WHERE TimePeriod_ID = @LatestPeriod;
GO

3 again 
USE ZZROProd;
GO
/* 1️⃣ Latest As‑Of period present */
SELECT MAX(AsOfTimePeriod) AS LatestAsOfPeriod      -- change column name if yours differs
FROM dbo.e_M_AccountHistory;
GO

DECLARE @LatestAsOf INT = (
    SELECT MAX(AsOfTimePeriod)                      -- same column
    FROM dbo.e_M_AccountHistory
);

/* 2️⃣ Show 100 rows from that As‑Of period */
SELECT TOP (100) *
FROM dbo.e_M_AccountHistory
WHERE AsOfTimePeriod = @LatestAsOf;                 -- same column
GO

/* 3️⃣ Row counts per As‑Of period */
SELECT
    AsOfTimePeriod,                                 -- same column
    COUNT(*)  AS [RowCount]
FROM dbo.e_M_AccountHistory
GROUP BY AsOfTimePeriod
ORDER BY AsOfTimePeriod DESC;
GO

/* 4️⃣ All rows from the latest As‑Of period */
SELECT *
FROM dbo.e_M_AccountHistory
WHERE AsOfTimePeriod = @LatestAsOf;                 -- same column
GO






Below you’ll find three separate deliverables:

⸻

1. Current Lineage Map (top → base)

Level‑0 :  Views used in original Query2
│
├─ SSE.v_M_BAMHouseholdCurrent
│      ↓
│      dbo.e_M_BAMHouseholdCurrent        (table, freshness column: TimePeriod_ID)
│
├─ SSE.v_M_AcctHistory
│      ↓
│      dbo.e_M_AccountHistory             (table, freshness column: AsOfTimePeriod)
│
└─ SSE.v_M_NNAAcctHST
       ↓
       dbo.e_M_NNAAcctHST                 (table, freshness columns: TimePeriod_ID, LastUpdateDT)

All three e_ objects are type U (base tables), so we are already at the lowest layer.

⸻

2. Re‑written consolidated query (uses fresh tables)

Below is a template that:
	•	Determines the latest common period across all three tables (safe alignment).
	•	Builds three CTEs filtered to that period.
	•	Replicates the logic of your original Query 2 (same joins & aggregations) but sourced from the up‑to‑date tables.

USE ZZROProd;
GO
/* 0️⃣  Pick the latest period present in ALL three tables */
DECLARE @LatestCommonPeriod INT = (
    SELECT MIN(LatestPeriod)
    FROM (
        SELECT MAX(TimePeriod_ID)   AS LatestPeriod FROM dbo.e_M_BAMHouseholdCurrent
        UNION ALL
        SELECT MAX(AsOfTimePeriod)  FROM dbo.e_M_AccountHistory
        UNION ALL
        SELECT MAX(TimePeriod_ID)   FROM dbo.e_M_NNAAcctHST
    ) p
);
/* 1️⃣  Build aligned slices */
WITH
BAM AS (
    SELECT *
    FROM dbo.e_M_BAMHouseholdCurrent
    WHERE TimePeriod_ID = @LatestCommonPeriod
),
Acct AS (
    SELECT *
    FROM dbo.e_M_AccountHistory
    WHERE AsOfTimePeriod = @LatestCommonPeriod
),
NNA AS (
    SELECT *
    FROM dbo.e_M_NNAAcctHST
    WHERE TimePeriod_ID = @LatestCommonPeriod
)
/* 2️⃣  Reproduce original Query2 logic (example) */
SELECT
    BAM.TimePeriod_ID,
    Acct.HouseholdKey,
    COUNT(DISTINCT Acct.ADPAccountNumber)                     AS Accounts,
    BAM.HHNewStatusCurrent,
    /* Sample CASE logic preserved */
    COUNT(CASE WHEN BAM.HHRepRecruitTPCurrent >= '202405'
               THEN 1 END)                                    AS RecruitFlag,
    SUM(Acct.TotalAUA)                                        AS AUA,
    SUM(NNA.AUA_prev)                                         AS PrevAUA,
    /* … continue with all original calculations … */
    SUM(CASE WHEN Acct.ManagedAccountFlag = '1'
             THEN Acct.TotalAUA ELSE 0 END)                   AS ManagedAUA,
    SUM(CASE WHEN Acct.ClientAccountType = 'T'
             THEN Acct.TotalAUA ELSE 0 END)                   AS TrustAUA,
    /* example T‑12 metrics */
    SUM(Acct.T12MonthCommissionBalance)                       AS T12Gross,
    SUM(Acct.T12MonthManagedAccountFees)                      AS T12Managed,
    SUM(Acct.T12MonthMutualFundTrails)                        AS T12_MFTrails,
    SUM(Acct.T12MonthAnnuityTrails)                           AS T12_AnnuityTrails,
    BAM.MaxHHAUALast12MonthsCurrent
FROM BAM
INNER JOIN Acct
    ON BAM.TimePeriod_ID = Acct.AsOfTimePeriod
   AND BAM.HouseholdKeyCurrent = Acct.HouseholdKey
INNER JOIN NNA
    ON NNA.TimePeriod_ID     = Acct.AsOfTimePeriod
   AND NNA.ADPAccountNumber  = Acct.ADPAccountNumber
WHERE BAM.HHMaxHUAALast12MonthsCurrent BETWEEN 0.01 AND 1000000
  AND Acct.ActiveFlag = '1'
  AND Acct.FirmTypeCode = 'R'
GROUP BY
    BAM.TimePeriod_ID,
    Acct.HouseholdKey,
    BAM.HHNewStatusCurrent,
    BAM.MaxHHAUALast12MonthsCurrent;

Notes
	•	If you decide you’re comfortable mixing periods (Option B), filter each CTE on its own MAX(...) instead of @LatestCommonPeriod.
	•	Any column names in comments (TotalAUA, AUA_prev, etc.) should match your schema exactly.
	•	Add or modify CASE/SUM logic to replicate every metric from the original Query 2.

⸻

3. Draft email to Laurelyn

Subject: BAM / Account / NNA Lineage Findings & Next‑Steps

Hi Laurelyn,

I’ve been digging into the three BAM data sets we use in our UHNW reporting pipeline-- v_M_BAMHouseholdCurrent, v_M_AcctHistory, and v_M_NNAAcctHST--and wanted to share what I’ve learned so far and where I could use your expertise.

What I traced:
	•	Each SSE view is essentially a wrapper over an e_ base table in dbo:
	•	e_M_BAMHouseholdCurrent
	•	e_M_AccountHistory
	•	e_M_NNAAcctHST
	•	These e_ tables are physical (type U), not synonyms or nested views.
	•	e_M_NNAAcctHST already contains rows for TimePeriod_ID = 202505 loaded on 6/2/2025 (14:17), while e_M_BAMHouseholdCurrent and e_M_AccountHistory currently top out at earlier periods.

Why this matters:
Our current consolidated query joins the SSE views, which aren’t refreshed until mid‑month. By querying the base tables directly we can see NNA data much earlier, but we need to understand when BAM Household and Account History reach the same period so we don’t join mismatched slices.

Questions / next steps:
	1.	Could you confirm the ETL schedule (or upstream source) for each e_ table--particularly when e_M_BAMHouseholdCurrent and e_M_AccountHistory pick up the new period?
	2.	Is there a recommended "go live" rule the team uses (e.g., wait until all three tables share the same TimePeriod_ID before publishing)?
	3.	Are there any additional freshness columns or audit tables that would help us automate the alignment check?

Once we agree on the refresh cadence, I can finalize a version of the consolidated query that pulls from the base tables and dynamically filters on the latest common period (or flags mixed‑period data if we decide to preview early).

Happy to share the SQL lineage scripts and a draft of the rewritten query if helpful. Let me know a good time to walk through or feel free to add comments.

Thanks for your guidance,

David Brunik

⸻

Next milestone

Run the freshness probes on the other two tables and confirm their latest periods.
Then we can lock in the final filter logic (latest common vs. mixed) and you’ll be ready to migrate fully to the fresh‑data version of the report.


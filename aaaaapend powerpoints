import pandas as pd
from pptx import Presentation
from pptx.util import Inches

# Read data from Excel
excel_file = "data.xlsx"
sheet_name = "Sheet1"  # Change if necessary
df = pd.read_excel(excel_file, sheet_name=sheet_name)

# Open the PowerPoint presentation
prs = Presentation("template.pptx")

# Get slide 7 (index 6)
slide = prs.slides[6]

# Determine table dimensions: add one row for headers
rows = df.shape[0] + 1
cols = df.shape[1]

# Define table position and size (adjust these values as needed)
left = Inches(1)
top = Inches(2)
width = Inches(8)
height = Inches(0.8 * rows)  # approximate height per row

# Add table shape to the slide
table_shape = slide.shapes.add_table(rows, cols, left, top, width, height)
table = table_shape.table

# Fill the header row
for col_index, col_name in enumerate(df.columns):
    table.cell(0, col_index).text = str(col_name)

# Fill in the data rows
for i, row in df.iterrows():
    for j, value in enumerate(row):
        table.cell(i+1, j).text = str(value)

# Save the updated presentation
prs.save("output.pptx")


------
import os
import datetime
from openpyxl import load_workbook

# Path to your PDF file scraped from the email
pdf_path = "path/to/your/file.pdf"

# Get the file's last modified timestamp
timestamp = os.path.getmtime(pdf_path)

# Convert the timestamp to a datetime object and extract only the date
modified_date = datetime.datetime.fromtimestamp(timestamp).date()
# Format the date as desired (for example, YYYY-MM-DD)
date_str = modified_date.strftime("%Y-%m-%d")

# Load your Utilization workbook (adjust the filename as needed)
workbook_path = "utilization.xlsx"
wb = load_workbook(workbook_path)

# Select the "Utilization" sheet
ws = wb["Utilization"]

# Get the existing value in cell I4 (if any) and append the new date
existing_value = ws["I4"].value
if existing_value:
    # Append new date to the existing text, separated by a comma
    ws["I4"].value = f"{existing_value}, {date_str}"
else:
    ws["I4"].value = date_str

# Save the workbook
wb.save(workbook_path)
333333333333333333333333

import os
import pandas as pd
from openpyxl import load_workbook
from datetime import datetime

# ------------------------------
# Amendable Paths and Variables
# ------------------------------

pdf_file_path = r"C:\Users\iams395\FP&A\your_downloaded_file.pdf"
excel_file_path = r"C:\Users\iams395\FP&A\3rd Party Banks Script.xlsx"
excel_sheet_to_update = 'Utilization_Summary'  # Your actual Excel sheet to insert date (if different)
target_excel_cell = 'I1'  # Change cell location as needed (e.g., 'I1', 'I2', etc.)

# ------------------------------
# Get modified date from PDF file
# ------------------------------

# Retrieve the modified timestamp of your PDF file
timestamp = os.path.getmtime(pdf_file_path)

# Convert timestamp to datetime and format as date only (no time)
date_modified = datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d')

print(f"PDF file modified date: {date_modified}")

# ------------------------------
# Write date into Excel cell
# ------------------------------

# Load existing workbook
wb = load_workbook(excel_file_path)

# Choose the exact worksheet:
sheet_name = 'IND_DAILY_BANK_RECAP'
ws = wb[sheet_name]

# Write the date (no time) to the specified cell
ws[target_excel_cell] = datetime.fromtimestamp(timestamp).date()

# Save workbook
wb.save(excel_file_path)

print(f"Date '{datetime.fromtimestamp(timestamp).date()}' written to '{sheet_name}' sheet, cell {target_excel_cell} successfully.")



-----
import os
import win32com.client
from datetime import datetime
from openpyxl import Workbook

# ------------------------------
# Step 1: Define target email subjects
# ------------------------------
target_subjects = [
    "RBC - FDIC Insured Sweep - Correspondent Accts",
    "RBC -FDIC Insured Sweep - Direct Accounts",
    "RBC - Uninsured Deposit Sweep",
    "RBC - FDIC Insured Sweep"
]

# This dictionary will map sheet names (derived from subject) to email body text.
email_contents = {}

# ------------------------------
# Step 2: Connect to Outlook and access the target folder
# ------------------------------
outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")

# Get the Inbox (folder 6) and then the "INTRAFI" folder
inbox = outlook.GetDefaultFolder(6)  # 6 = Inbox
intrafi_folder = inbox.Folders["INTRAFI"]

# Now, open the "Indios intrafi 10am" folder inside "INTRAFI"
target_folder = intrafi_folder.Folders["Indios intrafi 10am"]

# Retrieve emails sorted by ReceivedTime (most recent first)
messages = target_folder.Items
messages.Sort("[ReceivedTime]", Descending=True)

# ------------------------------
# Step 3: Loop through each target subject and get the most recent email
# ------------------------------
for target in target_subjects:
    found = False
    for message in messages:
        # Use .strip() to avoid leading/trailing whitespace issues
        subject = message.Subject.strip()
        if subject == target:
            # Found the most recent email for this target subject
            # Derive sheet name by removing "RBC -" and stripping extra spaces.
            sheet_name = subject.replace("RBC -", "").strip()
            # (Optional) Ensure sheet name is within Excel's 31-character limit:
            sheet_name = sheet_name[:31]
            # Store the email body (you can use message.Body or message.HTMLBody)
            email_contents[sheet_name] = message.Body
            found = True
            break  # Stop searching for this target subject once found
    if not found:
        print(f"No email found for subject: {target}")

# ------------------------------
# Step 4: Create a new Excel workbook and write each emailâ€™s content to its own sheet
# ------------------------------
wb = Workbook()
# Remove the default sheet created by openpyxl
default_sheet = wb.active
wb.remove(default_sheet)

for sheet_name, content in email_contents.items():
    ws = wb.create_sheet(title=sheet_name)
    # Write the email content into cell A1. (You could adjust this if you need more formatting.)
    ws["A1"] = content

# Define the output Excel file path (adjust as needed)
output_excel_path = r"C:\Users\iams395\FP&A\EmailContents.xlsx"
wb.save(output_excel_path)
print(f"Workbook saved to: {output_excel_path}")

# ------------------------------
# Step 5: Create and send an email with the Excel workbook attached
# ------------------------------

# Define recipients (separate multiple addresses with semicolons)
recipients = "user1@example.com; user2@example.com"  # <-- Update with actual email addresses

mail = outlook.CreateItem(0)  # 0 represents a MailItem
mail.To = recipients
mail.Subject = "Extracted Email Contents"
mail.Body = "Please find attached the workbook containing the extracted email contents."

# Attach the newly created Excel workbook
mail.Attachments.Add(output_excel_path)

# Send the email (or use mail.Display() to review before sending)
mail.Send()
print("Email sent successfully.")



----------


import pandas as pd
from openpyxl import Workbook

# Create a new workbook and remove the default sheet
wb = Workbook()
default_sheet = wb.active
wb.remove(default_sheet)

# Loop through each email content (the keys in email_contents are the sheet names)
for sheet_name, html_content in email_contents.items():
    # Try extracting tables from the HTML content
    try:
        tables = pd.read_html(html_content)
    except Exception as e:
        tables = []  # If parsing fails, no tables were found

    # Decide what to write to the sheet based on whether tables were found
    if tables:
        # If one or more tables are found, combine them or choose one
        # Here, we concatenate all tables vertically (you can adjust this if needed)
        df = pd.concat(tables, ignore_index=True)
    else:
        # Fallback: if no table is found, split the text into lines
        # and write each line to its own row in a single column.
        lines = html_content.splitlines()
        df = pd.DataFrame({'Content': lines})

    # Create a new sheet with the given sheet_name
    ws = wb.create_sheet(title=sheet_name)

    # Write the DataFrame to the worksheet
    # (We iterate over rows and columns to insert cell by cell)
    for row_index, row in df.iterrows():
        for col_index, value in enumerate(row, start=1):
            ws.cell(row=row_index + 1, column=col_index, value=value)

# Define the output Excel file path (update as needed)
output_excel_path = r"C:\Users\iams395\FP&A\EmailContents.xlsx"
wb.save(output_excel_path)
print(f"Workbook saved to: {output_excel_path}")
import os
import time
import subprocess
from pathlib import Path

# --- CONFIG ----------------------------------------------------
# Point this at your shortcut (.lnk) or the actual EXE.
# From your screenshot it looks like the shortcut lives here:
WEBEX_SHORTCUT = r"C:\Users\iams395\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Webex\Webex.lnk"

# How long to keep Webex open each cycle (minutes)
OPEN_MINUTES = 5

# Optional: wait time after closing before opening again (minutes)
GAP_MINUTES = 0
# ---------------------------------------------------------------

# Common Webex process names to kill; adjust if your Task Manager shows different names
PROCESS_NAMES = [
    "Webex.exe",
    "WebexPT.exe",
    "webexmta.exe",
    "webexhost.exe",
    "atmgr.exe"  # sometimes part of Webex stack
]

def launch_webex():
    path = Path(WEBEX_SHORTCUT)
    if not path.exists():
        raise FileNotFoundError(f"Cannot find Webex at: {path}")
    # start the .lnk or .exe
    os.startfile(str(path))  # uses ShellExecute; works with .lnk
    print(f"[+] Launched Webex via {path}")

def kill_webex():
    # Quietly attempt to kill all known Webex processes
    for name in PROCESS_NAMES:
        subprocess.run(
            ["taskkill", "/IM", name, "/F"],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            creationflags=subprocess.CREATE_NO_WINDOW
        )
    print("[+] Closed Webex (taskkill issued)")

def main():
    open_secs = int(OPEN_MINUTES * 60)
    gap_secs  = int(GAP_MINUTES * 60)

    print(f"Starting Webex pulser: open {OPEN_MINUTES} min, gap {GAP_MINUTES} min. Ctrl+C to stop.")
    try:
        while True:
            launch_webex()
            time.sleep(open_secs)
            kill_webex()
            if gap_secs:
                time.sleep(gap_secs)
    except KeyboardInterrupt:
        print("\n[!] Stopping on user request…")
        kill_webex()

if __name__ == "__main__":
    main()
    
    
    
    
    
    import os
import time
import subprocess
from pathlib import Path
import platform

# ====== CONFIG ======
WEBEX_TARGET = r"C:\Users\iams395\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Webex\Webex.lnk"
OPEN_SECONDS = 2     # "pretty much instantly" (minimum 1 sec so the process spawns)
GAP_SECONDS  = 2     # short pause before reopening
KEEP_AWAKE   = True  # keep display/system from sleeping while running
# ====================

# Common Webex processes to terminate
PROCESS_NAMES = [
    "Webex.exe", "WebexPT.exe", "webexmta.exe",
    "webexhost.exe", "CiscoCollabHost.exe",
    "wbxsvc.exe", "ptoneclk.exe", "atmgr.exe"
]

def set_keep_awake(enable: bool):
    """Prevent display/system sleep while this Python process runs (Windows only)."""
    if platform.system() != "Windows":
        return
    import ctypes
    ES_CONTINUOUS       = 0x80000000
    ES_SYSTEM_REQUIRED  = 0x00000001
    ES_DISPLAY_REQUIRED = 0x00000002
    flags = ES_CONTINUOUS | ES_SYSTEM_REQUIRED | ES_DISPLAY_REQUIRED if enable else ES_CONTINUOUS
    ctypes.windll.kernel32.SetThreadExecutionState(flags)
    print(f"[+] Keep-awake {'ENABLED' if enable else 'DISABLED'}")

def launch_webex():
    path = Path(WEBEX_TARGET)
    if not path.exists():
        raise FileNotFoundError(f"Cannot find Webex shortcut/exe at: {path}")
    os.startfile(str(path))  # works with .lnk or .exe
    print("[+] Opened Webex")

def kill_webex():
    cf = getattr(subprocess, "CREATE_NO_WINDOW", 0)
    for name in PROCESS_NAMES:
        subprocess.run(
            ["taskkill", "/F", "/T", "/IM", name],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            creationflags=cf
        )
    print("[+] Closed Webex")

def main():
    open_s = max(1, int(OPEN_SECONDS))
    gap_s  = max(1, int(GAP_SECONDS))
    print(f"Pulse mode: open ~{open_s}s, gap ~{gap_s}s. Press Ctrl+C to stop.")

    try:
        if KEEP_AWAKE:
            set_keep_awake(True)

        while True:
            launch_webex()
            time.sleep(open_s)
            kill_webex()
            time.sleep(gap_s)

    except KeyboardInterrupt:
        print("\n[!] Stopping…")
    finally:
        # restore normal sleep behavior and make sure Webex isn't left running
        try:
            if KEEP_AWAKE:
                set_keep_awake(False)
        finally:
            try:
                kill_webex()
            except Exception:
                pass
        print("[+] Done. Sleep restored.")

if __name__ == "__main__":
    main()
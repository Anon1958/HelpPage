import pandas as pd
from pathlib import Path

# ------------------------------------------------------------------
# 1. File locations (edit only if the paths change)
# ------------------------------------------------------------------
BROKERAGE_ADV_PATH = Path(r"C:\Users\iams395\Brokerage_Advisory.xlsx")
OUTPUT_PATH        = Path(r"C:\Users\iams395\Number_of_Accounts_Report.xlsx")

# ------------------------------------------------------------------
# 2. Bring the other two source tables into scope
#    (comment these out if the data frames already exist)
# ------------------------------------------------------------------
# df_all_managedaccount        = pd.read_excel(r"C:\path_to\All_Managed_Accounts.xlsx")
# df_instant_advisory_counts   = pd.read_excel(r"C:\path_to\Instant_Advisory_Counts.xlsx")

# ------------------------------------------------------------------
# 3. Helper to standardise column names
# ------------------------------------------------------------------
def _clean_columns(df: pd.DataFrame) -> pd.DataFrame:
    df.columns = (
        df.columns
          .str.strip()          # trim blanks
          .str.lower()          # make lower‑case
          .str.replace(' ', '_')
          .str.replace('#', '') # strip the "#"
    )
    return df

# ------------------------------------------------------------------
# 4. Load / clean the Brokerage‑Advisory table
# ------------------------------------------------------------------
df_ba = pd.read_excel(BROKERAGE_ADV_PATH, dtype=str)
_clean_columns(df_ba)
df_ba = df_ba.rename(columns={'accts': 'brokerage_to_advisory'})
df_ba['timeperiod_id']          = df_ba['timeperiod_id'].astype(str)
df_ba['brokerage_to_advisory']  = pd.to_numeric(df_ba['brokerage_to_advisory'],
                                                errors='coerce')

# ------------------------------------------------------------------
# 5. Clean the two in‑memory data frames
# ------------------------------------------------------------------
_clean_columns(df_all_managedaccount)
df_all_managedaccount['timeperiod_id'] = df_all_managedaccount['timeperiod_id'].astype(str)

_clean_columns(df_instant_advisory_counts)
df_instant_advisory_counts['timeperiod_id'] = (
    df_instant_advisory_counts['timeperiod_id'].astype(str)
)

# ------------------------------------------------------------------
# 6. Build the flows matrix
# ------------------------------------------------------------------
periods = sorted(df_all_managedaccount['timeperiod_id'].unique())
records = []

for i in range(len(periods) - 1):
    period, next_period = periods[i], periods[i + 1]

    begin_accts = df_all_managedaccount.loc[
        df_all_managedaccount['timeperiod_id'] == period, 'managed_accounts'
    ].iat[0]

    end_accts = df_all_managedaccount.loc[
        df_all_managedaccount['timeperiod_id'] == next_period, 'managed_accounts'
    ].iat[0]

    new_adv = df_instant_advisory_counts.loc[
        df_instant_advisory_counts['timeperiod_id'] == next_period,
        'newadvisoryaccounts'
    ].squeeze() if 'newadvisoryaccounts' in df_instant_advisory_counts.columns else None

    brk_to_adv = df_ba.loc[
        df_ba['timeperiod_id'] == next_period, 'brokerage_to_advisory'
    ].squeeze()

    records.append({
        'timeperiod_id'            : next_period,
        'Beginning # of Accounts'  : begin_accts,
        'New Advisory Accounts'    : new_adv,
        'Brokerage to Advisory'    : brk_to_adv,
        'Closed Account'           : None,
        'Brokerage to Brokerage'   : None,
        'Advisory to Brokerage'    : None,
        'Advisory Closed'          : None,
        'Ending # of Accounts'     : end_accts
    })

flows_df = pd.DataFrame(records).set_index('timeperiod_id').T

# ------------------------------------------------------------------
# 7. Send everything to Excel
# ------------------------------------------------------------------
with pd.ExcelWriter(OUTPUT_PATH, engine='openpyxl', mode='w') as writer:
    flows_df.to_excel(writer, sheet_name='Flows UAT Draft1')
    df_ba.to_excel(writer,   sheet_name='Brokerage Advisory', index=False)

print(f'✅  Flows table built and saved to:  {OUTPUT_PATH}')
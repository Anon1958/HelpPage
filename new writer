import pyodbc
from sqlalchemy import create_engine
from sqlalchemy.exc import SQLAlchemyError
import xlsxwriter
from datetime import datetime

# Configuration: Database connection details
DATABASE_CONFIG = {
    "driver": "ODBC Driver 17 for SQL Server",
    "server": "<YOUR_SERVER_NAME>",
    "database": "ZZRProd",
    "username": "<YOUR_DB_USERNAME>",
    "password": "<YOUR_DB_PASSWORD>"
}

# Construct the connection string for SQLAlchemy (pyodbc)
connection_string = (
    f"mssql+pyodbc://{DATABASE_CONFIG['username']}:{DATABASE_CONFIG['password']}"
    f"@{DATABASE_CONFIG['server']}/{DATABASE_CONFIG['database']}"
    f"?driver={DATABASE_CONFIG['driver'].replace(' ', '+')}"
)
# Create SQLAlchemy engine with fast_executemany and pool_pre_ping for performance and reliability
engine = create_engine(connection_string, fast_executemany=True, pool_pre_ping=True)

# Output Excel file path
output_file = r"C:\Users\liams395\TrustDetailsMonthly.xlsx"

try:
    # Connect to the database and get a raw pyodbc cursor
    connection = engine.raw_connection()
    cursor = connection.cursor()
    # You could optionally set cursor.arraysize for fetchmany (default is usually 1)
    cursor.arraysize = 10000  # Hint for pyodbc to fetch ~10000 rows per batch

    # Create an XlsxWriter workbook with constant_memory mode to handle large data efficiently [oai_citation:12‡xlsxwriter.readthedocs.io](https://xlsxwriter.readthedocs.io/working_with_memory.html#:~:text=Fortunately%2C%20this%20memory%20usage%20can,property)
    workbook = xlsxwriter.Workbook(output_file, {"constant_memory": True})
    worksheets = []  # keep track of added worksheet objects
    data_found = False

    # Define the start and end periods (YYYYMM format)
    start_period = 202201
    end_period = 202504

    # Calculate year and month from start and end period
    start_year = start_period // 100
    start_month = start_period % 100
    end_year = end_period // 100
    end_month = end_period % 100

    # Iterate from start period to end period month by month
    year, month = start_year, start_month
    while (year < end_year) or (year == end_year and month <= end_month):
        timeperiod_id = year * 100 + month
        try:
            # Execute the query for this TimePeriod_ID (parameterized to avoid SQL injection)
            cursor.execute(
                "SELECT * FROM ZZRProd.dbo.e_M_TrustDetail WHERE TimePeriod_ID = ?",
                timeperiod_id
            )
        except pyodbc.Error as db_err:
            # Log database error and skip to next period
            print(f"[Warning] Database query failed for TimePeriod_ID {timeperiod_id}: {db_err}")
            # Attempt to continue with next period
            # If needed, you could also attempt a reconnect here
            pass
        else:
            # If query executed, get column names from cursor description
            columns = [col[0] for col in cursor.description] if cursor.description else []
            # Fetch the first batch of rows
            rows = cursor.fetchmany(10000)
            if rows:
                # Only create worksheet if we got data
                data_found = True
                sheet_name = str(timeperiod_id)
                try:
                    worksheet = workbook.add_worksheet(sheet_name)
                except xlsxwriter.exceptions.DuplicateWorksheetName:
                    # In case of duplicate sheet names (should not happen here), make a unique name
                    worksheet = workbook.add_worksheet(f"{sheet_name}_{len(worksheets)+1}")
                worksheets.append(worksheet)
                # Write the header row (column names)
                if columns:
                    worksheet.write_row(0, 0, columns)
                    start_row = 1  # data starts from the second row
                else:
                    start_row = 0  # no columns info, data from first row

                # Write data rows in batches
                row_index = start_row
                while rows:
                    for row in rows:
                        # Write the entire row at once for efficiency
                        worksheet.write_row(row_index, 0, row)
                        row_index += 1
                    # Fetch next batch
                    rows = cursor.fetchmany(10000)
            # If no rows, do nothing (no sheet for this period)
        # Move to the next month
        if month == 12:
            year += 1
            month = 1
        else:
            month += 1

    # After looping all periods, handle the case of no data found
    if not data_found:
        # Create a dummy sheet with "No Data Available"
        sheet = workbook.add_worksheet("No Data Available")
        sheet.write(0, 0, "No Data Available")
        worksheets.append(sheet)

    # Ensure at least one sheet is visible and active (select the first sheet) [oai_citation:13‡stackoverflow.com](https://stackoverflow.com/questions/72058726/xlsxwriter-how-to-set-opening-sheet#:~:text=With%20XlsxWriter%20you%20can%20can,method)
    if worksheets:
        worksheets[0].activate()        # make first sheet the active sheet on open
        worksheets[0].set_first_sheet() # in case Excel needs it to be the first visible sheet

except (SQLAlchemyError, pyodbc.Error) as err:
    print(f"[Error] A database error occurred: {err}")
except Exception as e:
    print(f"[Error] An unexpected error occurred: {e}")
finally:
    # Close the Excel workbook to write data to disk
    try:
        workbook.close()
    except Exception as e:
        print(f"[Error] Failed to close Excel workbook: {e}")
    # Close database cursor and connection
    try:
        cursor.close()
        connection.close()
    except Exception as e:
        print(f"[Error] Failed to close database connection: {e}")
    # Dispose the SQLAlchemy engine (frees connection pool resources)
    engine.dispose()